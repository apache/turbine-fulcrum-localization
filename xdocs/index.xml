<?xml version="1.0"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
-->

<document>

  <properties>
    <title>Localization Component</title>
    <author email="epugh@upstate.com">Eric PUgh</author>
  </properties>

  <body>

  <section name="Overview">
    <p>
      This component wraps provides Localization of strings.  It is written
      for use in Turbine but it can be used in any container compatible
      with Avalon's ECM container.
    </p>
  </section>

<section name="Configuration">

    <p>
      First, here is the role configuration.
    </p>

<source>
<![CDATA[
    <role
        name="org.apache.fulcrum.localization.LocalizationService"
        shorthand="localization"
        default-class="org.apache.fulcrum.localization.DefaultLocalizationService"/>
]]>
</source>

  <p>
    Now comes the basic configuration of the component.  Here will will
    configure the various bundles.
  </p>
<source>

<![CDATA[
    <localization>
      <bundles>
        <bundle>org.apache.fulcrum.localization.BarBundle</bundle>
        <bundle>org.apache.fulcrum.localization.FooBundle</bundle>
      </bundles>
    </localization>
]]>
</source>

  </section>

  <section name="Usage">

<source><![CDATA[

TurbineServices.getInstance().getService(LocalizationService.LOCALIZATION)
    .getString("DISPLAYPROJECTS_TITLE");

]]></source>

<p>
Wow. That is a lot of typing. That could be easily shortened to this:
</p>

<source><![CDATA[

Localization.getString("DISPLAYPROJECTS_TITLE");

]]></source>

<p>
The hard example above was given as an example of using Services. The easy
example is the one that you really should be using. Another cool feature
of the Localization class is that you can pass in a RunData object like
this:
</p>

<source><![CDATA[

Localization.getString(data, "DISPLAYPROJECTS_TITLE");

]]></source>

<p>
This has the added effect of using the Accept-Language HTTP header to determine
which language to display based on what setting the user has defined in
the browser. Can you say Dynamic Localization? ;-)
</p>

<p>
For creating the file where you get the value of the String, please
see the <em>java.util.ListResourceBundle</em> and
<em>java.util.ResourceBundle</em> classes for more information.
<a href="http://java.apache.org/jyve/">Jyve</a> also contains example usage
of this code because that was the first place where this code was originally
developed.
</p>
  </section>

</body>
</document>
